-----------------------------------------------------------------------------
-- Redworks Toolkit
-- Author: MewK
--
-- This program is released under the MIT License (MIT).
-----------------------------------------------------------------------------

-- Using:
os.loadAPI('/rom/apis/rwtk_libs/rwtk_app')
os.loadAPI('/rom/apis/rwtk_libs/rwtk_draw')
os.loadAPI('/rom/apis/rwtk_libs/rwtk_string')

-- Base frame class
frame = rwtk_core.class(rwtk_app.component, function(_self, properties)
	-- Default properties
	_self.title = nil
	
	_self.components = nil
	_self.componentFocusIndex = 0
	
	_self.menu = nil
	_self.menuSelectionIndex = 0
	_self.menuSubSelectionIndex = 0

	-- Call base constructor
	rwtk_app.component.init(_self, properties)
		
	-- Default menu alignment: top
	if _self.menu and not _self.menu.align then
		_self.menu.align = 'top'
	end
end)

-- Base functions

function frame:innerDimensions()
	-- Call base
	x, y, width, height = self._base.innerDimensions(self)
	
	if self.title then
		y = y + 2
		height = height - 2
	end
	
	if self.menu then
		height = height - 2
		if self.menu.align == 'top' then
			y = y + 2
		end
	end
	
	return x, y, width, height
end

function frame:onDrawInternal()
	-- Call base
	self._base.onDrawInternal(self, true)
	
	local outerX, outerY, outerWidth, outerHeight = self:outerDimensions()
	
	local mx = outerX + self.padding
	local my = outerY + self.padding
	
	-- Draw title
	if self.title then
		rwtk_draw.drawHorizontalLine(outerX, outerY + 1 + self.padding, outerWidth, self.border)
		rwtk_draw.fillRectangle(outerX + self.padding, outerY + self.padding, outerWidth - 2 - 2 * self.padding, 1, ' ')
		term.setCursorPos(outerX + 1 + self.padding, outerY + self.padding)
		term.write(rwtk_string.ellipsis(self.title, outerWidth - 2 - 2 * self.padding))
		my = my + 2
	end
	
	-- Draw menu
	if self.menu then
		if self.menu.align == 'bottom' then
			my = outerHeight - 1 - self.padding
		end
	
		-- Clear menu area
		rwtk_draw.fillRectangle(mx, my, outerWidth - 2 * self.padding, 2, ' ')
		
		-- Draw menu area
		if self.menu.align == 'bottom' then
			rwtk_draw.drawHorizontalLine(self.x, my, outerWidth, self.border)
		elseif self.menu.align == 'top' then
			rwtk_draw.drawHorizontalLine(self.x, my + 1, outerWidth, self.border)
		end
		
		-- Draw menu entries
		local _x = mx
		local _y = my
		if self.menu.align == 'bottom' then
			_y = _y + 1
		end
		local __y = _y
		for index, item in ipairs(self.menu.items) do
			term.setCursorPos(_x, __y)
			if index == self.menuSelectionIndex then
				term.write('['..item.text..']')
					
				-- Draw sub-menu
				if item.items then
					-- Get longest sub-item
					local subItemMaxWidth = 0
					for subIndex, subItem in ipairs(item.items) do
						local subItemWidth = # subItem.text
						if subItemWidth > subItemMaxWidth then
							subItemMaxWidth = subItemWidth
						end
					end
					
					-- Calculate sub-menu dimensions
					local subMenuWidth = subItemMaxWidth + 6
					local subMenuHeight = # item.items + 2
					
					-- Draw menu border
					if self.menu.align == 'bottom' then
						_y = my - subMenuHeight + 1
						rwtk_draw.drawHorizontalLine(_x, _y, subMenuWidth, true)
						rwtk_draw.drawVerticalLine(_x, _y, subMenuHeight, true)
						rwtk_draw.drawVerticalLine(_x + subMenuWidth - 1, _y, subMenuHeight, true)
						_y = _y + 1
					elseif self.menu.align == 'top' then
						_y = my + 1		
						rwtk_draw.drawHorizontalLine(_x, _y + subMenuHeight - 1, subMenuWidth, true)
						rwtk_draw.drawVerticalLine(_x, _y, subMenuHeight, true)
						rwtk_draw.drawVerticalLine(_x + subMenuWidth - 1, _y, subMenuHeight, true)
						_y = _y + 1
					end
					
					-- Draw sub-menu items
					for subIndex, subItem in ipairs(item.items) do
						term.setCursorPos(_x + 1, _y)
						if subIndex == self.menuSubSelectionIndex then
							term.write(' ['..rwtk_string.pad(subItem.text, subItemMaxWidth, ' ')..'] ')
						else
							term.write('  '..rwtk_string.pad(subItem.text, subItemMaxWidth, ' ')..'  ')
						end
						_y = _y + 1
					end
				end
			else
				term.write(' '..item.text..' ')
			end
			
			_x = _x + # item.text + 2
		end
	end
end

function frame:onKeyInternal(keyCode)
	if not self:isMenuActive() then
		-- Focus next focusable component
		if keyCode == 15 then
			if self.components and # self.components > 1 then
				local focusIndex = self.componentFocusIndex
				local focusName = nil
				while true do
					focusIndex = focusIndex + 1
					if focusIndex > # self.components then
						focusName = nil
						break
					elseif focusIndex == self.componentFocusIndex or self.components[focusIndex].focusable then
						focusName = self.components[focusIndex].name
						break
					end
				end
				self:focusComponent(focusName)
			end
		end
	end
	
	if self.menu then
		-- Toggle menu (Control)
		if keyCode == 29 then
			self:toggleMenuFocus()
			
		-- Navigate menu
		elseif self:isMenuActive() then
			local menuItem = self:selectedMenuItem()
			
			-- Up
			if keyCode == 200 then
				if menuItem.items then
					self.menuSubSelectionIndex = self.menuSubSelectionIndex - 1
					if self.menuSubSelectionIndex < 1 then
						self.menuSubSelectionIndex = # menuItem.items
					end
				end
	
			-- Down
			elseif keyCode == 208 then
				if menuItem.items then
					self.menuSubSelectionIndex = self.menuSubSelectionIndex + 1
					if self.menuSubSelectionIndex > # menuItem.items then
						self.menuSubSelectionIndex = 1
					end
				end
	
			-- Left
			elseif keyCode == 203 then
				self.menuSelectionIndex = self.menuSelectionIndex - 1
				if self.menuSelectionIndex < 1 then
					self.menuSelectionIndex = # self.menu.items
				end
				self.menuSubSelectionIndex = 1
	
			-- Right
			elseif keyCode == 205 then
				self.menuSelectionIndex = self.menuSelectionIndex + 1
				if self.menuSelectionIndex > # self.menu.items then
					self.menuSelectionIndex = 1
				end
				self.menuSubSelectionIndex = 1

			-- Enter
			elseif keyCode == 28 then
				if menuItem.onAction then
					menuItem.onAction(self)
				elseif menuItem.items then
					local subMenuItem = self:selectedSubMenuItem()
					if subMenuItem and subMenuItem.onAction then
						subMenuItem.onAction(self)
					end
				end
				self:focusMenu(false)
			end
		end
	end
end

-- Component functions

function frame:getComponent(name)
	if self.components then
		for index, component in ipairs(self.components) do
			if component.name == name then
				return component, index 
			end
		end
	end
	return nil, nil
end

function frame:getActiveComponent()
	if self.componentFocusIndex > 0 then
		return self.components[self.componentFocusIndex]
	end
	return false
end

function frame:removeComponent(name)
	if not self.components then
		return
	end
	
	-- Get component
	local component, index = self:getComponent(name)
	
	-- Remove component
	if index then
		table.remove(self.components, index)
		-- Change focus
		if index == self.componentFocusIndex then
			self.componentFocusIndex = self.componentFocusIndex - 1
		end
	end
end
	
function frame:addComponent(name, component)
	if not self.components then
		self.components = {}
	else
		-- Remove component if exists
		self:removeComponent(name)
	end

	-- Add component
	component.application = self.application
	component.name = name
	component.frame = self
	table.insert(self.components, component)
end

function frame:focusComponent(name)
	-- DeFocus old component
	if self.componentFocusIndex > 0 then
		self.components[self.componentFocusIndex].focused = false
	end
	
	-- Get component
	if name then
		local component, index = self:getComponent(name)
		if component then
			-- Focus new component
			component.focused = true;
			self.componentFocusIndex = index
		end
	else
		self.componentFocusIndex = 0
	end
end

-- Menu functions

function frame:isMenuActive()
	return self.menuSelectionIndex > 0
end

function frame:focusMenu(focused)
	if focused then
		self.menuSelectionIndex = 1
		self.menuSubSelectionIndex = 1
	else
		self.menuSelectionIndex = 0
		self.menuSubSelectionIndex = 0
	end
end

function frame:toggleMenuFocus()
	self:focusMenu(not self:isMenuActive())
end

function frame:selectedMenuItem()
	if self.menu then
		return self.menu.items[self.menuSelectionIndex]
	end
	return false
end

function frame:selectedSubMenuItem()
	if self.menu then
		local item = self:selectedMenuItem();
		if item and item.items then
			return item.items[self.menuSubSelectionIndex]
		end
	end
	return false
end

-- Factory function

function create(properties)
	return frame(properties);
end
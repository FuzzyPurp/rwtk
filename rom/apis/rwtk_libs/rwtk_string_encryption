--[[
Copyright (C) 2012 Thomas Farr a.k.a tomass1996 [farr.thomas@gmail.com]

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and
associated documentation files (the "Software"), to deal in the Software without restriction,
including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense,
copies of the Software, and to permit persons to whom the Software is furnished to do so,
subject to the following conditions:

-The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
-Visible credit is given to the original author.
-The software is distributed in a non-profit way.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
--]]

local floor,modf, insert = math.floor,math.modf, table.insert
local char,format,rep = string.char,string.format,string.rep

local tSHA1 = {}
tSHA1["bytes_to_w32"] = function(a,b,c,d) return a*0x1000000+b*0x10000+c*0x100+d end
tSHA1["w32_to_bytes"] = function(i) return floor(i/0x1000000)%0x100,floor(i/0x10000)%0x100,floor(i/0x100)%0x100,i%0x100 end
tSHA1["w32_rot"] = function(bits,a)
    local b2 = 2^(32-bits)
    local a,b = modf(a/b2)
    return a+b*b2*(2^(bits))
end
tSHA1["byte_to_bits"] = function(b)
    local b = function (n)
        local b = floor(b/n)
        return b%2==1
    end
    return b(1),b(2),b(4),b(8),b(16),b(32),b(64),b(128)
end
tSHA1["bits_to_byte"] = function(a,b,c,d,e,f,g,h)
    local function n(b,x) return b and x or 0 end
    return n(a,1)+n(b,2)+n(c,4)+n(d,8)+n(e,16)+n(f,32)+n(g,64)+n(h,128)
end
tSHA1["bits_to_string"] = function(a,b,c,d,e,f,g,h)
    local function x(b) return b and "1" or "0" end
    return ("%s%s%s%s %s%s%s%s"):format(x(a),x(b),x(c),x(d),x(e),x(f),x(g),x(h))
end
tSHA1["byte_to_bit_string"] = function(b) return tSHA1.bits_to_string(byte_to_bits(b)) end
tSHA1["w32_to_bit_string"] = function(a)
    if type(a) == "string" then return a end
    local aa,ab,ac,ad = tSHA1.w32_to_bytes(a)
    local s = tSHA1.byte_to_bit_string
    return ("%s %s %s %s"):format(s(aa):reverse(),s(ab):reverse(),s(ac):reverse(),s(ad):reverse()):reverse()
end
tSHA1["band"] = function(a,b)
    local A,B,C,D,E,F,G,H = tSHA1.byte_to_bits(b)
    local a,b,c,d,e,f,g,h = tSHA1.byte_to_bits(a)
    return tSHA1.bits_to_byte(
        A and a, B and b, C and c, D and d,
        E and e, F and f, G and g, H and h)
end
tSHA1["bor"] = function(a,b)
    local A,B,C,D,E,F,G,H = tSHA1.byte_to_bits(b)
    local a,b,c,d,e,f,g,h = tSHA1.byte_to_bits(a)
    return tSHA1.bits_to_byte(
        A or a, B or b, C or c, D or d,
        E or e, F or f, G or g, H or h)
end
tSHA1["bxor"] = function(a,b)
    local A,B,C,D,E,F,G,H = tSHA1.byte_to_bits(b)
    local a,b,c,d,e,f,g,h = tSHA1.byte_to_bits(a)
    return tSHA1.bits_to_byte(
        A ~= a, B ~= b, C ~= c, D ~= d,
        E ~= e, F ~= f, G ~= g, H ~= h)
end
tSHA1["bnot"] = function(x) return 255-(x % 256) end
tSHA1["w32_comb"] = function(fn)
    return function (a,b)
        local aa,ab,ac,ad = tSHA1.w32_to_bytes(a)
        local ba,bb,bc,bd = tSHA1.w32_to_bytes(b)
        return tSHA1.bytes_to_w32(fn(aa,ba),fn(ab,bb),fn(ac,bc),fn(ad,bd))
    end
end
tSHA1["w32_xor_n"] = function(a,...)
    local aa,ab,ac,ad = tSHA1.w32_to_bytes(a)
    for i=1,select('#',...) do
        local ba,bb,bc,bd = tSHA1.w32_to_bytes(select(i,...))
        aa,ab,ac,ad = tSHA1.bxor(aa,ba),tSHA1.bxor(ab,bb),tSHA1.bxor(ac,bc),tSHA1.bxor(ad,bd)
    end
    return tSHA1.bytes_to_w32(aa,ab,ac,ad)
end
tSHA1["w32_or3"] = function(a,b,c)
    local aa,ab,ac,ad = tSHA1.w32_to_bytes(a)
    local ba,bb,bc,bd = tSHA1.w32_to_bytes(b)
    local ca,cb,cc,cd = tSHA1.w32_to_bytes(c)
    return tSHA1.bytes_to_w32(
        tSHA1.bor(aa,tSHA1.bor(ba,ca)), tSHA1.bor(ab,tSHA1.bor(bb,cb)), tSHA1.bor(ac,tSHA1.bor(bc,cc)), tSHA1.bor(ad,tSHA1.bor(bd,cd))
    )
end
tSHA1["w32_not"] = function(a) return 4294967295-(a % 4294967296) end
tSHA1["w32_add"] = function(a,b) return (a+b) % 4294967296 end
tSHA1["w32_add_n"] = function(a,...)
    for i=1,select('#',...) do
        a = (a+select(i,...)) % 4294967296
    end
    return a
end
tSHA1["w32_to_hexstring"] = function(w) return format("%08x",w) end
tSHA1["w32_and"] = tSHA1.w32_comb(tSHA1.band)
tSHA1["w32_xor"] = tSHA1.w32_comb(tSHA1.bxor)
tSHA1["w32_or"] = tSHA1.w32_comb(tSHA1.bor)

local function basen(n,b)
	if n < 0 then
		n = -n
	end
       local t = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_abcdefghijklmnopqrstuvwxyz{|}~"
   if n < b then
	local ret = ""
	ret = ret..string.sub(t, (n%b)+1,(n%b)+1)
	return ret
   else
	local tob = tostring(basen(math.floor(n/b), b))
	local ret = tob..t:sub((n%b)+1,(n%b)+1)
	return ret
   end
end

local function find(str, match, startIndex)  --Finds @match in @str optionally after @startIndex
	if not match then return nil end
	str = tostring(str)
	local _ = startIndex or 1
	local _s = nil
	local _e = nil
	local _len = match:len()
	while true do
		local _t = str:sub( _ , _len + _ - 1)
		if _t == match then
			_s = _
			_e = _ + _len - 1
			break
		end
		_ = _ + 1
		if _ > str:len() then break end
	end
	if _s == nil then return nil else return _s, _e end
end

local function jumble(str)  --Jumbles @str
	if not str then return nil end
	str = tostring(str)
	local chars = {}
	for i = 1, #str do
		chars[i] = str:sub(i, i)
	end
	local usedNums = ":"
	local res = ""
	local rand = 0
	for i=1, #chars do
		while true do
			rand = math.random(#chars)
			if find(usedNums, ":"..rand..":") == nil then break end
		end
		res = res..chars[rand]
		usedNums = usedNums..rand..":"
	end
	return res
end

local function SHA1(str) --Returns SHA1 Hash of @str
    if not str then return nil end
    str = tostring(str)
    local H0,H1,H2,H3,H4 = 0x67452301,0xEFCDAB89,0x98BADCFE,0x10325476,0xC3D2E1F0
    local msg_len_in_bits = #str * 8
    local first_append = char(0x80)
    local non_zero_message_bytes = #str +1 +8
    local current_mod = non_zero_message_bytes % 64
    local second_append = current_mod>0 and rep(char(0), 64 - current_mod) or ""
    local B1, R1 = modf(msg_len_in_bits  / 0x01000000)
    local B2, R2 = modf( 0x01000000 * R1 / 0x00010000)
    local B3, R3 = modf( 0x00010000 * R2 / 0x00000100)
    local B4	  =	0x00000100 * R3
    local L64 = char( 0) .. char( 0) .. char( 0) .. char( 0)
            .. char(B1) .. char(B2) .. char(B3) .. char(B4)
    str = str .. first_append .. second_append .. L64
    assert(#str % 64 == 0)
    local chunks = #str / 64
    local W = { }
    local start, A, B, C, D, E, f, K, TEMP
    local chunk = 0
    while chunk < chunks do
        start,chunk = chunk * 64 + 1,chunk + 1
        for t = 0, 15 do
            W[t] = tSHA1.bytes_to_w32(str:byte(start, start + 3))
            start = start + 4
        end
        for t = 16, 79 do
            W[t] = tSHA1.w32_rot(1, tSHA1.w32_xor_n(W[t-3], W[t-8], W[t-14], W[t-16]))
        end
        A,B,C,D,E = H0,H1,H2,H3,H4
        for t = 0, 79 do
            if t <= 19 then
                f = tSHA1.w32_or(tSHA1.w32_and(B, C), tSHA1.w32_and(tSHA1.w32_not(B), D))
                K = 0x5A827999
            elseif t <= 39 then
                f = tSHA1.w32_xor_n(B, C, D)
                K = 0x6ED9EBA1
            elseif t <= 59 then
                f = tSHA1.w32_or3(tSHA1.w32_and(B, C), tSHA1.w32_and(B, D), tSHA1.w32_and(C, D))
                K = 0x8F1BBCDC
            else
                f = tSHA1.w32_xor_n(B, C, D)
                K = 0xCA62C1D6
            end
            A,B,C,D,E = tSHA1.w32_add_n(tSHA1.w32_rot(5, A), f, E, W[t], K),
            A, tSHA1.w32_rot(30, B), C, D
        end
        H0,H1,H2,H3,H4 = tSHA1.w32_add(H0, A),tSHA1.w32_add(H1, B),tSHA1.w32_add(H2, C),tSHA1.w32_add(H3, D),tSHA1.w32_add(H4, E)
    end
    local f = tSHA1.w32_to_hexstring
    return f(H0) .. f(H1) .. f(H2) .. f(H3) .. f(H4)
end

--Encryption Utils:--


function encrypt(str, key)  --Encrypts @str with @key
	if not key then return nil end
	str = tostring(str)
	local alphabet = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_abcdefghijklmnopqrstuvwxyz{|}~"
	local _rand = math.random(#alphabet-10)
	local iv = string.sub(jumble(alphabet), _rand, _rand  + 9)
	iv = jumble(iv)
	str = iv..str
	local key = SHA1(key)
	local strLen = str:len()
	local keyLen = key:len()
	local j=1
	local result = ""
	for i=1, strLen do
		local ordStr = string.byte(str:sub(i,i))
		if j == keyLen then j=1 end
		local ordKey = string.byte(key:sub(j,j))
		result = result..string.reverse(basen(ordStr+ordKey, 36))
		j = j+1
	end
	return result
end

function decrypt(str, key)  --Decrypts @str with @key
	if not key then return nil end
	str = tostring(str)
	local key = SHA1(key)
	local strLen = str:len()
	local keyLen = key:len()
	local j=1
	local result = ""
	for i=1, strLen, 2 do
		local ordStr = basen(tonumber(string.reverse(str:sub(i, i+1)),36),10)
		if j==keyLen then j=1 end
		local ordKey = string.byte(key:sub(j,j))
		local nxChar = ordStr-ordKey
		if nxChar<0 or nxChar>127 then nxChar = 0 end
		result = result..string.char(nxChar)
		j = j+1
	end
	return result:sub(11)
end

function setRandSeed(seed)  --Sets random seed to @seed
	math.randomseed(seed)
end

setRandSeed(os.time())

function test()
	local br = "\n----------\n"
    setRandSeed(os.time())
    local logFile = io.open("EncryptUtil.log", "w")
    logFile:write(br)
    logFile:write("encrypt(\"Hello\", \"Key\")".."\n")
    local enc = encrypt("Hello", "Key")
    logFile:write(enc.."\n")
    logFile:write(br)
    logFile:write("decrypt()".."\n")
    logFile:write(decrypt(enc, "Key").."\n")
    logFile:write(br)
	logFile:close()
end
-----------------------------------------------------------------------------
-- Redworks Toolkit
-- Author: MewK
--
-- This program is released under the MIT License (MIT).
-----------------------------------------------------------------------------

-- Using:
os.loadAPI('/rom/apis/rwtk_libs/rwtk_app')
os.loadAPI('/rom/apis/rwtk_libs/rwtk_draw')
os.loadAPI('/rom/apis/rwtk_libs/rwtk_string')

-- TextBox component class
textBox = rwtk_core.class(rwtk_app.component, function(_self, properties)
	-- Default properties
	_self.cursorX = 1
	_self.cursorY = 1
	_self.focusable = true
	_self.isPassword = false
	_self.multiLine = false
	_self.readOnly = false
	_self.scrollX = 0
	_self.scrollY = 0
	_self.text = nil
	_self.wordWrap = false
	
	-- Call base constructor
	rwtk_app.component.init(_self, properties)
end)

-- Base functions

function textBox:innerDimensions(outerX, outerY, outerWidth, outerHeight)
	outerX, outerY, outerWidth, outerHeight = self._base.innerDimensions(self, outerX, outerY, outerWidth, outerHeight)
	
	-- scrollbars
	
	return outerX, outerY, outerWidth, outerHeight
end

function textBox:onDrawInternal(outerX, outerY, outerWidth, outerHeight)
	-- Draw base
	self._base.onDrawInternal(self, outerX, outerY, outerWidth, outerHeight)
	
	local innerX, innerY, innerWidth, innerHeight = self:innerDimensions(outerX, outerY, outerWidth, outerHeight)
	
	-- Draw text
	if self.text then
		rwtk_draw_text.drawText(self.text, innerX, innerY, innerWidth, innerHeight, self.scrollX, self.scrollY, self.wordWrap, false, self.cursorX, self.cursorY, nil)
	end
	
	-- Set Cursor
	if self.application then
		if self.focused then
			self.application.showCursor = true
			self.application.cursorX = innerX + self.cursorX - 1
			self.application.cursorY = innerY + self.cursorY - 1
		else
			self.application.showCursor = false
			self.application.cursorX = 1
			self.application.cursorY = 1
		end
	end
end

function textBox:onKeyInternal(keyCode)
	-- Backspace
	if keyCode == 14 then
		if self.text then
			local _text = ''
			if self.cursorX - 2 >= 1 then
				_text = self.text:sub(1, self.cursorX - 2) .. _text
				self.cursorX = self.cursorX - 1
			end
			if self.cursorX >= 1 then
				_text = _text .. self.text:sub(self.cursorX)
			end
			self.text = _text
		end
		
	-- Enter
	elseif keyCode == 28 then
		self:onCharInternal('\n')
		
	-- Up
	elseif keyCode == 200 and self.multiLine then
		self.cursorY = self.cursorY - 1

	-- Down
	elseif keyCode == 208 and self.multiLine then
		self.cursorY = self.cursorY + 1

	-- Left
	elseif keyCode == 203 then
		self.cursorX = self.cursorX - 1

	-- Right
	elseif keyCode == 205 then
		self.cursorX = self.cursorX + 1

	-- Delete
	elseif keyCode == 211 then
		if self.text then
			local _text = ''
			if self.cursorX - 1 >= 1 then
				_text = self.text:sub(1, self.cursorX - 1) .. _text
			end
			if self.cursorX  + 1 >= 1 then
				_text = _text .. self.text:sub(self.cursorX + 1)
			end
			self.text = _text
		end
	end
	
	if self.text then
		local innerX, innerY, innerWidth, innerHeight = self:innerDimensions(self.frame:innerDimensions(self.application.x, self.application.y, self.application.width, self.application.height))
		self.cursorX, self.cursorY = rwtk_draw_text.drawText(self.text, innerX, innerY, innerWidth, innerHeight, self.scrollX, self.scrollY, self.wordWrap, false, self.cursorX, self.cursorY, nil)
	end
end

function textBox:onCharInternal(char)
	if not self.text then
		self.text = ''
	end
	
	local _text = char
	
	if self.cursorX - 1 >= 1 then
		_text = self.text:sub(1, self.cursorX - 1) .. _text
	end
	
	if self.cursorX >= 1 then
		_text = _text .. self.text:sub(self.cursorX)
	end
	
	self.text = _text
	self.cursorX = self.cursorX + 1
end

-- Factory function

function create(properties)
	return textBox(properties);
end
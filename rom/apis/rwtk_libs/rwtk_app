-----------------------------------------------------------------------------
-- Redworks Toolkit
-- Author: MewK
--
-- This program is released under the MIT License (MIT).
-----------------------------------------------------------------------------

-- Using:
os.loadAPI('/rom/apis/rwtk_libs/rwtk_core')

-----------------------------------------------------------------------------
-- Component class
-----------------------------------------------------------------------------

component = rwtk_core.class(function(_self, properties)
	local _width, _height = term.getSize()
	
	-- Default properties
	_self.border = true
	--_self.focusable = false
	_self.focused = false
	_self.height = _height
	_self.padding = 1
	_self.visible = true
	_self.width = _width
	_self.x = 1
	_self.y = 1
	
	-- User properties
	if properties then
		-- Copy properties
		for key, value in pairs(properties) do
			_self[key] = value
		end
	
		-- Check padding
		if not _self.border then
			_self.padding = 0
		end
		
		if not _self.x then
			_self.x = 1
		end
		if not _self.y then
			_self.y = 1
		end
		if not _self.witdh then
			_self.witdh = _witdh
		end
		if not _self.height then
			_self.height = _height
		end
	end
end)

-- Base functions

function component:innerDimensions(innerX, innerY, innerWidth, innerHeight)
	innerX = innerX + self.x + self.padding - 1
	innerY = innerY + self.y + self.padding - 1
	innerWidth = self.width - 2 * self.padding
	innerHeight = self.height - 2 * self.padding
	return innerX, innerY, innerWidth, innerHeight
end

function component:onDrawInternal(innerX, innerY, innerWidth, innerHeight, keepBackground)	
	if not keepBackground then
	-- Clear
		rwtk_draw.fillRectangle(innerX, innerY, innerWidth, innerHeight, ' ')
	end
	
	-- Draw frame
	if self.border then
		rwtk_draw.drawRectangle(innerX + self.x - 1, innerY + self.y - 1, self.width, self.height)
	end
end

function component:onKeyInternal(keyCode)
	-- do something
end

-----------------------------------------------------------------------------
-- Application class
-----------------------------------------------------------------------------

application = rwtk_core.class(function(_self, properties)
	local _width, _height = term.getSize()

	-- Default properties
	_self.focusIndex = 0
	_self.height = _height
	_self.layers = {}
	_self.running = false
	_self.width = _width
	_self.x = 1
	_self.y = 1
	
	-- User properties
	if properties then
		for key, value in pairs(properties) do
			_self[key] = value
		end
		
		if not _self.x then
			_self.x = 1
		end
		if not _self.y then
			_self.y = 1
		end
		if not _self.width then
			_self.width = _width
		end
		if not _self.height then
			_self.height = _height
		end
	end
end)

function application:getLayer(name)
	for index, layer in ipairs(self.layers) do
		if layer.name == name then
			return layer, index 
		end
	end
	return nil, nil
end

function application:getActiveLayer()
	if self.focusIndex > 0 then
		return self.layers[self.focusIndex]
	end
	return false
end

function application:removeLayer(name)
	-- Get layer
	local layer, index = self:getLayer(name)
	
	-- Remove layer
	if index then
		table.remove(self.layers, index)
		-- Change focus
		if index == self.focusIndex then
			self.focusIndex = self.focusIndex - 1
		end
	end
end
	
function application:addLayer(name, layer)
	-- Remove layer if exists
	self:removeLayer(name)
	
	-- Add layer
	layer.name = name
	layer.parent = self
	table.insert(self.layers, layer)
end

function application:focusLayer(name)
	-- Get layer
	local layer, index = self:getLayer(name)
	if layer then
		-- DeFocus old layer
		if self.focusIndex > 0 then
			self.layers[self.focusIndex].focused = false
		end
		
		-- Focus new layer
		layer.focused = true;
		self.focusIndex = index
	end
end

function application:callEvent(eventHandler, ...)
	local function _callEvent(layer, name, ...)
		if layer and layer[name] then
			layer[name](layer, ...)
		end
	end

	local stopEvent = false
	local activeLayer = self:getActiveLayer()
	
	if self[eventHandler] then 
		stopEvent = self[eventHandler](self, ...) 
	end

	if not stopEvent then
		if eventHandler == 'onDraw' then
			term.clear()
			term.setCursorPos(1, 1)
			for index, layer in ipairs(self.layers) do
				local stopEvent = false
				if layer.visible then
					local innerLayerX, innerLayerY, innerLayerWidth, innerLayerHeight = layer:innerDimensions(self.x, self.y, self.width, self.height)
					rwtk_draw.fillRectangle(innerLayerX, innerLayerY, innerLayerWidth, innerLayerHeight, ' ')
					term.setCursorPos(innerLayerX, innerLayerY)
					local stopEvent = _callEvent(layer, eventHandler, innerLayerX, innerLayerY, innerLayerWidth, innerLayerHeight)
					if not stopEvent then
						if layer.components then
							for index, component in ipairs(layer.components) do
								if component.visible then
									local innerComponentX, innerComponentY, innerComponentWidth, innerComponentHeight = layer:innerDimensions(innerLayerX, innerLayerY, innerLayerWidth, innerLayerHeight)
									term.setCursorPos(innerComponentX, innerComponentY)
									local stopSubEvent = _callEvent(component, eventHandler, innerComponentX, innerComponentY, innerComponentWidth, innerComponentHeight)
									if not stopSubEvent then
										term.setCursorPos(innerLayerX, innerLayerY)
										_callEvent(component, eventHandler..'Internal', innerLayerX, innerLayerY, innerLayerWidth, innerLayerHeight)
									end
								end
							end
						end
						term.setCursorPos(self.x, self.y)
						_callEvent(layer, eventHandler..'Internal', self.x, self.y, self.width, self.height)
					end
				end
			end
		else
			local stopEvent = _callEvent(activeLayer, eventHandler, ...)
			if not stopEvent then
				_callEvent(activeLayer, eventHandler..'Internal', ...)
				local activeComponent = activeLayer:getActiveComponent()
				if activeComponent then
					local stopSubEvent = _callEvent(activeComponent, eventHandler, ...)
					if not stopSubEvent then
						_callEvent(activeComponent, eventHandler..'Internal', ...)
					end
				end
			end
		end
	end
end

function application:start()
	local handlerNames = {
		alarm = 'onAlarm',
		char = 'onChar',
		disk = 'onDisk',
		disk_eject = 'onDiskEject',
		key = 'onKey',
		rednet_message = 'onRednet',
		redstone = 'onRedstone',
		timer = 'onTimer'
	}
	
	self.running = true
	
	-- onStart
	self:callEvent('onStart')
	
	-- Draw screen
	self:callEvent('onDraw')
	
	while self.running do
		-- Pull event
		local event, param1, param2 = os.pullEvent()
		
		-- Handle event
		self:callEvent('onEvent', event, param1, param2)
		if handlerNames[event] then
			self:callEvent(handlerNames[event], param1, param2)
		end
		
		-- Draw screen
		self:callEvent('onDraw')
	end
	
	-- onStop
	self:callEvent('onStop')
	
	-- Clear screen
	term.clear()
	term.setCursorPos(1, 1)
end

function application:stop()
	self.running = false
end

-- Factory function
function create(properties)
	return application(properties)
end